import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getCache, CachedItem } from '@/lib/searchCache';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY! || 'AIzaSyAT4nqOpNNJrP8FoZ00dwqQWYcolh0AkzQ');

// ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu ph√¢n t√≠ch
interface ParsedIntent {
  intent: string;
  entity: string;
  extra: {
    storage: string;
    color: string;
    priceRange: string;
    feature: string;
  };
}

// B·∫£ng √°nh x·∫° t·ª´ kh√≥a ƒë·ªÉ h·ªó tr·ª£ vi·∫øt t·∫Øt nh∆∞ 'ip' -> 'iphone'
const keywordMap: Record<string, string> = {
  ip: 'iphone',
  ss: 'samsung',
  mb: 'macbook',
  mtb: 'ipad',
  wm: 'windows',
  gb: 'gb',
  pr: 'pro',
  prx: 'promax',
  prm: 'promax',
  pls: 'plus',
};

// H√†m chu·∫©n h√≥a chu·ªói: lo·∫°i b·ªè d·∫•u v√† kho·∫£ng tr·∫Øng
function normalizeString(str: string): string {
  return str.toLowerCase().replace(/[^a-z0-9]/g, '');
}

// H√†m ki·ªÉm tra query c√≥ kh·ªõp v·ªõi t√™n s·∫£n ph·∫©m (h·ªó tr·ª£ nhi·ªÅu t·ª´, vi·∫øt t·∫Øt)
function queryMatchesName(query: string, name: string): boolean {
  const qTokens = query
    .toLowerCase()
    .split(/\s+/)
    .map((w) => keywordMap[w] || w)
    .map(normalizeString)
    .filter(Boolean);

  const normalizedName = normalizeString(name);

  // T·∫•t c·∫£ t·ª´ query ph·∫£i xu·∫•t hi·ªán trong t√™n s·∫£n ph·∫©m
  return qTokens.every((token) => normalizedName.includes(token));
}

// Regex ƒë·ªÉ tr√≠ch xu·∫•t c√°c entity s·∫£n ph·∫©m, h·ªó tr·ª£ nhi·ªÅu bi·∫øn th·ªÉ
function extractEntities(text: string): string[] {
  const lower = text.toLowerCase();
  const regex =
    /\b(iphone|samsung|macbook|ipad|windows)\s?(\d{1,2})\s?(pro\s?max|promax|pro|plus|air|mini|ultra|fold|flip)?\s?(\d{2,3}gb)?\s?(xanh|ƒëen|tr·∫Øng|v√†ng|b·∫°c|ƒë·ªè)?\b/gi;
  const matches = lower.match(regex);
  return matches ? [...new Set(matches.map((m) => m.trim()))] : []; // Lo·∫°i b·ªè tr√πng l·∫∑p
}

// H√†m l·ªçc s·∫£n ph·∫©m d·ª±a tr√™n intent v√† extra, s·ª≠ d·ª•ng c√°c field nh∆∞ name, color, price
function filterProducts(cachedData: CachedItem[], parsed: ParsedIntent, entities: string[]): CachedItem[] {
  let filtered = cachedData;

  // L·ªçc theo entity ho·∫∑c entities t·ª´ regex, s·ª≠ d·ª•ng queryMatchesName ƒë·ªÉ h·ªó tr·ª£ vi·∫øt t·∫Øt
  const searchTerms =
    entities.length > 0
      ? entities
      : parsed.entity
          .split(',')
          .map((e) => e.trim().toLowerCase())
          .filter(Boolean);
  if (searchTerms.length > 0) {
    filtered = filtered.filter((item) => searchTerms.some((term) => queryMatchesName(term, item.name)));
  }

  // L·ªçc theo dung l∆∞·ª£ng l∆∞u tr·ªØ (storage) trong field name
  if (parsed.extra.storage) {
    const storageLower = parsed.extra.storage.toLowerCase();
    filtered = filtered.filter((item) => item.name.toLowerCase().includes(storageLower));
  }

  // L·ªçc theo m√†u s·∫Øc d·ª±a tr√™n field color
  if (parsed.extra.color) {
    const colorLower = parsed.extra.color.toLowerCase();
    filtered = filtered.filter((item) => item.color?.toLowerCase().includes(colorLower));
  }

  // L·ªçc theo kho·∫£ng gi√° d·ª±a tr√™n field price (gi·∫£ s·ª≠ price l√† ngh√¨n VNƒê, chuy·ªÉn sang ƒë·∫ßy ƒë·ªß)
  if (parsed.extra.priceRange) {
    const range = parsed.extra.priceRange.toLowerCase();
    if (range.includes('d∆∞·ªõi') || range.includes('under')) {
      const maxPrice = parseInt(range.match(/\d+/)?.[0] || '0') * 1000000; // Chuy·ªÉn tri·ªáu VNƒê
      filtered = filtered.filter((item) => (item.price || Infinity) * 1000 <= maxPrice); // Nh√¢n 1000 v√¨ price l√† ngh√¨n VNƒê
    } else if (range.includes('r·∫ª nh·∫•t') || range.includes('cheapest')) {
      filtered.sort((a, b) => (a.price || Infinity) - (b.price || Infinity));
      filtered = filtered.slice(0, 5); // Top 5 r·∫ª nh·∫•t
    }
    // C√≥ th·ªÉ th√™m logic cho kho·∫£ng gi√° kh√°c (tr√™n X tri·ªáu, t·ª´ X-Y tri·ªáu)
  }

  // L·ªçc theo t√≠nh nƒÉng d·ª±a tr√™n field name (c√≥ th·ªÉ m·ªü r·ªông sau n·∫øu c√≥ field ri√™ng)
  if (parsed.extra.feature) {
    const featureLower = parsed.extra.feature.toLowerCase();
    filtered = filtered.filter(
      (item) => item.name.toLowerCase().includes(featureLower) // Gi·∫£ s·ª≠ t√™n ch·ª©a hint t√≠nh nƒÉng
    );
  }

  // Lo·∫°i b·ªè tr√πng l·∫∑p v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
  return Array.from(new Map(filtered.map((p) => [p._id, p])).values()).slice(0, 10);
}

// C√°c ph·∫£n h·ªìi hardcoded cho smalltalk ƒë·ªÉ ti·∫øt ki·ªám quota API
const smalltalkResponses: Record<string, string> = {
  // Ch√†o h·ªèi
  'xin ch√†o': 'Xin ch√†o Anh/Ch·ªã! Em l√† tr·ª£ l√Ω AI c·ªßa 7Teck. Anh/Ch·ªã ƒëang t√¨m s·∫£n ph·∫©m n√†o h√¥m nay? ƒêi·ªán tho·∫°i, laptop hay m√°y t√≠nh b·∫£ng?',
  hello: 'Em r·∫•t s·∫µn l√≤ng h·ªó tr·ª£ Anh/Ch·ªã üòä. Anh/Ch·ªã c·∫ßn t∆∞ v·∫•n s·∫£n ph·∫©m g√¨?',
  hi: 'Hi! Em l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa 7Teck.vn. H√£y cho em bi·∫øt Anh/Ch·ªã quan t√¢m ƒë·∫øn iPhone, Samsung hay MacBook nh√©!',
  'ch√†o shop': 'D·∫° em ch√†o Anh/Ch·ªã ·∫° üëã. Em c√≥ th·ªÉ h·ªó tr·ª£ Anh/Ch·ªã t√¨m s·∫£n ph·∫©m nhanh ch√≥ng nh·∫•t.',
  alo: 'D·∫° em nghe ·∫° üòÑ. Anh/Ch·ªã mu·ªën tham kh·∫£o d√≤ng s·∫£n ph·∫©m n√†o c·ªßa 7Teck?',
  'good morning': 'Good morning Anh/Ch·ªã üåû. Anh/Ch·ªã c·∫ßn tham kh·∫£o s·∫£n ph·∫©m n√†o cho h√¥m nay?',
  'good evening': 'Ch√†o bu·ªïi t·ªëi Anh/Ch·ªã üåô. Anh/Ch·ªã mu·ªën em t∆∞ v·∫•n ƒëi·ªán tho·∫°i, laptop hay ph·ª• ki·ªán ·∫°?',

  // C·∫£m ∆°n
  'c·∫£m ∆°n': 'D·∫° em c·∫£m ∆°n Anh/Ch·ªã ƒë√£ tin t∆∞·ªüng 7Teck ·∫° üôè. N·∫øu c·∫ßn th√™m h·ªó tr·ª£, em lu√¥n s·∫µn s√†ng.',
  thanks: 'You‚Äôre welcome Anh/Ch·ªã! Em lu√¥n s·∫µn l√≤ng h·ªó tr·ª£ ·∫° üòä.',
  'thank you': 'R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ Anh/Ch·ªã üíô. N·∫øu c√≤n th·∫Øc m·∫Øc, Anh/Ch·ªã c·ª© h·ªèi em nh√©!',

  // H·ªèi thƒÉm
  'kh·ªèe kh√¥ng': 'D·∫° em lu√¥n s·∫µn s√†ng ƒë·ªÉ ph·ª•c v·ª• Anh/Ch·ªã ·∫° üí™. Anh/Ch·ªã th√¨ sao ·∫°?',
  'how are you': 'I‚Äôm great, thank you! üòä S·∫µn s√†ng t∆∞ v·∫•n cho Anh/Ch·ªã b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o ·ªü 7Teck.',

  // T·∫°m bi·ªát
  't·∫°m bi·ªát': 'D·∫° em ch√†o Anh/Ch·ªã üëã. H·∫πn g·∫∑p l·∫°i Anh/Ch·ªã t·∫°i 7Teck.vn nh√©!',
  bye: 'Bye Anh/Ch·ªã, ch√∫c Anh/Ch·ªã m·ªôt ng√†y t·ªët l√†nh üåü.',
  'see you': 'See you again soon, Anh/Ch·ªã! Em lu√¥n ·ªü ƒë√¢y h·ªó tr·ª£ ·∫°.',

  // C√°c c√¢u ph·ªï bi·∫øn kh√°c
  '7teck l√† g√¨':
    '7Teck l√† h·ªá th·ªëng b√°n l·∫ª c√°c s·∫£n ph·∫©m c√¥ng ngh·ªá ch√≠nh h√£ng: ƒëi·ªán tho·∫°i, laptop, tablet v√† ph·ª• ki·ªán. Anh/Ch·ªã c·∫ßn em gi·ªõi thi·ªáu danh m·ª•c n√†o ·∫°?',
  'c√≥ freeship kh√¥ng': 'D·∫°, 7Teck c√≥ h·ªó tr·ª£ freeship cho ƒë∆°n h√†ng ƒë·ªß ƒëi·ªÅu ki·ªán üéÅ. Anh/Ch·ªã mu·ªën em ki·ªÉm tra chi ti·∫øt gi√∫p kh√¥ng ·∫°?',
  'gi·ªù m·ªü c·ª≠a': '7Teck.vn h·ªó tr·ª£ online 24/7. N·∫øu Anh/Ch·ªã c·∫ßn ƒë·∫øn c·ª≠a h√†ng, gi·ªù m·ªü c·ª≠a l√† 8:00 - 21:30 h·∫±ng ng√†y.',
};

export async function POST(req: Request) {
  try {
    const body = (await req.json()) as { message: string };
    const { message } = body;
    if (!message) {
      return NextResponse.json({ success: false, message: 'Thi·∫øu tin nh·∫Øn' }, { status: 400 });
    }

    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json({ success: false, message: 'Ch∆∞a c·∫•u h√¨nh API key cho Gemini.' }, { status: 500 });
    }

    const lowerMessage = message.toLowerCase();

    // X·ª≠ l√Ω smalltalk hardcoded ƒë·ªÉ ti·∫øt ki·ªám quota
    for (const key in smalltalkResponses) {
      if (lowerMessage.includes(key)) {
        return NextResponse.json({
          success: true,
          reply: smalltalkResponses[key],
          intent: 'smalltalk',
          entity: '',
        });
      }
    }

    // 1. G·ªçi Gemini ƒë·ªÉ ph√¢n t√≠ch intent (c·∫£i ti·∫øn prompt cho ch√≠nh x√°c h∆°n)
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash-latest' }); // S·ª≠ d·ª•ng model m·ªõi nh·∫•t
    const intentPrompt = `
    B·∫°n l√† h·ªá th·ªëng NLP th√¥ng minh cho chatbot b√°n h√†ng ƒëi·ªán tho·∫°i, laptop, m√°y t√≠nh b·∫£ng t·∫°i 7Teck.vn.
    Ph√¢n t√≠ch tin nh·∫Øn ng∆∞·ªùi d√πng: "${message}".
    
    Tr·∫£ v·ªÅ JSON ch√≠nh x√°c v·ªõi c·∫•u tr√∫c sau (kh√¥ng th√™m g√¨ ngo√†i JSON):
    {
      "intent": "ask_price" | "search_product" | "ask_color" | "ask_payment" | "ask_availability" | "smalltalk" | "compare_products" | "cheapest_product" | "filter_by_price" | "filter_by_feature" | "other",
      "entity": "t√™n s·∫£n ph·∫©m ho·∫∑c t·ª´ kh√≥a ch√≠nh (v√≠ d·ª•: iphone 14, samsung s23, macbook air). N·∫øu nhi·ªÅu, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y. N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng",
      "extra": {
        "storage": "dung l∆∞·ª£ng l∆∞u tr·ªØ (v√≠ d·ª•: 128GB, 256GB). N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng",
        "color": "m√†u s·∫Øc (v√≠ d·ª•: xanh, ƒëen). N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng",
        "priceRange": "kho·∫£ng gi√° (v√≠ d·ª•: d∆∞·ªõi 10 tri·ªáu, t·ª´ 15-20 tri·ªáu, r·∫ª nh·∫•t). N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng",
        "feature": "t√≠nh nƒÉng c·ª• th·ªÉ (v√≠ d·ª•: camera t·ªët, pin l√¢u, gaming, m√†n h√¨nh l·ªõn). N·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng"
      }
    }
    
    Quy t·∫Øc ph√¢n lo·∫°i intent:
    - H·ªèi gi√° s·∫£n ph·∫©m: "ask_price"
    - T√¨m ki·∫øm ho·∫∑c h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ: "search_product"
    - H·ªèi v·ªÅ m√†u s·∫Øc c√≥ s·∫µn: "ask_color"
    - H·ªèi v·ªÅ tr·∫£ g√≥p, thanh to√°n: "ask_payment"
    - H·ªèi c√≤n h√†ng, t·ªìn kho: "ask_availability"
    - Ch√†o h·ªèi, tr√≤ chuy·ªán x√£ giao: "smalltalk"
    - So s√°nh gi·ªØa c√°c s·∫£n ph·∫©m: "compare_products"
    - T√¨m s·∫£n ph·∫©m r·∫ª nh·∫•t trong lo·∫°i: "cheapest_product"
    - L·ªçc theo kho·∫£ng gi√°: "filter_by_price"
    - L·ªçc theo t√≠nh nƒÉng: "filter_by_feature"
    - Kh√¥ng kh·ªõp: "other"
    - ∆Øu ti√™n intent c·ª• th·ªÉ nh·∫•t, d·ª±a tr√™n t·ª´ kh√≥a trong tin nh·∫Øn.
    - Entity: Tr√≠ch xu·∫•t ch√≠nh x√°c t√™n s·∫£n ph·∫©m, h·ªó tr·ª£ nhi·ªÅu (v√≠ d·ª•: "iphone 14, samsung s23"). N·∫øu vi·∫øt t·∫Øt nh∆∞ "ip 14" th√¨ m·ªü r·ªông th√†nh "iphone 14".
    `;

    let parsed: ParsedIntent = { intent: 'other', entity: '', extra: { storage: '', color: '', priceRange: '', feature: '' } };
    try {
      const intentResult = await model.generateContent(intentPrompt);
      const jsonText = intentResult.response
        .text()
        .replace(/```json|```/g, '')
        .trim();
      parsed = JSON.parse(jsonText);
    } catch (error) {
      console.error('L·ªói parse intent:', error);
      parsed.intent = 'smalltalk';
    }

    // 2. X·ª≠ l√Ω smalltalk n·∫øu fallback t·ª´ API
    if (parsed.intent === 'smalltalk') {
      return NextResponse.json({
        success: true,
        reply: 'Xin ch√†o Anh/Ch·ªã! Em l√† tr·ª£ l√Ω AI c·ªßa 7Teck. Anh/Ch·ªã! mu·ªën t√¨m s·∫£n ph·∫©m n√†o h√¥m nay? ƒêi·ªán tho·∫°i, laptop hay m√°y t√≠nh b·∫£ng?',
        intent: parsed.intent,
        entity: parsed.entity,
      });
    }

    // 3. Tr√≠ch xu·∫•t entities b·ªï sung t·ª´ regex
    const regexEntities = extractEntities(message);

    // 4. L·∫•y cache v√† l·ªçc s·∫£n ph·∫©m d·ª±a tr√™n intent/extra
    const cachedData = await getCache();
    let foundProducts = filterProducts(cachedData, parsed, regexEntities);

    // N·∫øu kh√¥ng t√¨m th·∫•y, m·ªü r·ªông t√¨m ki·∫øm (fallback)
    if (foundProducts.length === 0 && parsed.intent !== 'compare_products') {
      foundProducts = cachedData.filter((item) => queryMatchesName(parsed.entity.toLowerCase(), item.name)).slice(0, 5);
    }

    // 5. S·ª≠ d·ª•ng Gemini ƒë·ªÉ generate reply d·ª±a tr√™n intent v√† products, c·∫£i ti·∫øn ƒë·ªÉ khai th√°c d·ªØ li·ªáu b√™n ngo√†i n·∫øu c·∫ßn
    const systemPrompt = `
    B·∫°n l√† ChatBot 7Teck, tr·ª£ l√Ω b√°n h√†ng chuy√™n nghi·ªáp, th√¢n thi·ªán t·∫°i 7Teck.vn - c·ª≠a h√†ng b√°n ƒëi·ªán tho·∫°i, laptop, m√°y t√≠nh b·∫£ng t√≠ch h·ª£p AI.
    ∆Øu ti√™n b√°n h√†ng: M√¥ t·∫£ s·∫£n ph·∫©m h·∫•p d·∫´n, nh·∫•n m·∫°nh t√≠nh nƒÉng, khuy·∫øn kh√≠ch mua, cung c·∫•p link chi ti·∫øt.
    S·ª≠ d·ª•ng HTML ƒë·ªÉ ƒë·ªãnh d·∫°ng: th·∫ª card cho s·∫£n ph·∫©m (kh√¥ng d√πng b·∫£ng ƒë·ªÉ tr√°nh tr√†n n·ªôi dung), v·ªõi class Tailwind, s·ª≠ d·ª•ng m√†u primary (#a92d30) cho text v√† border, primary-lighter (#fee2e2) cho background (v√≠ d·ª•: <div class="flex flex-col gap-4"> cho nhi·ªÅu card, m·ªói card: <div class="bg-primary-lighter border border-primary rounded-lg p-2 flex flex-col items-center text-center max-w-full overflow-hidden">, <img src="..." alt="..." class="w-16 h-16 object-contain mb-2 rounded">, <p class="text-primary font-bold text-sm truncate w-full">{t√™n}</p>, <p class="text-primary text-xs">M√†u: {m√†u}</p>, <p class="text-primary font-semibold text-sm">{gi√°} VNƒê</p>, <a href="..." class="text-primary text-xs hover:underline">Xem chi ti·∫øt</a>), s·ª≠ d·ª•ng truncate cho t√™n d√†i, object-contain cho ·∫£nh ƒë·ªÉ v·ª´a khung chat h·∫πp (400px), kh√¥ng th√™m text ngo√†i card ƒë·ªÉ tr√°nh v·ª° UI.
    Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, h·ªØu √≠ch.
    N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m trong DB, s·ª≠ d·ª•ng ki·∫øn th·ª©c c·∫≠p nh·∫≠t c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m m·ªõi nh·∫•t nƒÉm 2025 (nh∆∞ iPhone 17 series v·ªõi gi√° t·ª´ 22 tri·ªáu VND cho b·∫£n ti√™u chu·∫©n, 42 tri·ªáu cho Pro, camera 24MP, ra m·∫Øt th√°ng 9/2025; Samsung Galaxy S25, iPad Air M3, MacBook Air M4, Windows laptops nh∆∞ Surface Laptop 7) ƒë·ªÉ g·ª£i √Ω, d·ª±a tr√™n d·ªØ li·ªáu web m·ªõi nh·∫•t, v√† g·ª£i √Ω t√¨m ki·∫øm th√™m ho·∫∑c li√™n h·ªá c·ª≠a h√†ng.
    ƒê·ªëi v·ªõi so s√°nh: Li·ªát k√™ ƒëi·ªÉm kh√°c bi·ªát, ∆∞u nh∆∞·ª£c ƒëi·ªÉm d·ª±a tr√™n ki·∫øn th·ª©c chung v√† d·ªØ li·ªáu m·ªõi nh·∫•t.
    ƒê·ªëi v·ªõi t√≠nh nƒÉng: S·ª≠ d·ª•ng ki·∫øn th·ª©c AI ƒë·ªÉ gi·∫£i th√≠ch chi ti·∫øt (camera, pin, hi·ªáu nƒÉng,...), khai th√°c th√¥ng tin b√™n ngo√†i n·∫øu c·∫ßn.
    N·∫øu intent l√† 'other' ho·∫∑c c√¢u h·ªèi kh√≥, s·ª≠ d·ª•ng ki·∫øn th·ª©c c·∫≠p nh·∫≠t ƒë·ªÉ tr·∫£ l·ªùi, v√≠ d·ª•: gi√° m·ªõi nh·∫•t, specs t·ª´ 2025.
    `;

    const userPrompt = `
    Intent c·ªßa ng∆∞·ªùi d√πng: ${parsed.intent}
    Entity: ${parsed.entity || regexEntities.join(', ') || 'Kh√¥ng c√≥'}
    Extra: ${JSON.stringify(parsed.extra)}
    
    S·∫£n ph·∫©m t√¨m th·∫•y t·ª´ DB (∆∞u ti√™n hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng th·∫ª card HTML ƒë·∫πp n·∫øu ph√π h·ª£p, v·ªõi c·∫•u tr√∫c: H√¨nh ·∫£nh, T√™n (truncate), M√†u, Gi√° (ƒë·ªãnh d·∫°ng s·ªë ngh√¨n VNƒê, v√≠ d·ª•: 11.000.000 VNƒê), Link; kh√¥ng th√™m text ngo√†i card ƒë·ªÉ tr√°nh v·ª° UI):
    ${foundProducts.length > 0 ? JSON.stringify(foundProducts, null, 2) : 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m kh·ªõp. H√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c c·∫≠p nh·∫≠t ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± ho·∫∑c m·ªõi nh·∫•t t·ª´ 2025 d·ª±a tr√™n intent.'}
    
    Tin nh·∫Øn g·ªëc: "${message}"
    
    T·∫°o ph·∫£n h·ªìi ph√π h·ª£p v·ªõi intent:
    - ask_price: B√°o gi√° chi ti·∫øt, khuy·∫øn m√£i n·∫øu c√≥, c·∫≠p nh·∫≠t gi√° 2025 n·∫øu c·∫ßn.
    - search_product: Hi·ªÉn th·ªã th·∫ª card s·∫£n ph·∫©m ƒë·∫πp, m√¥ t·∫£ ng·∫Øn.
    - ask_color: Li·ªát k√™ m√†u s·∫Øc c√≥ s·∫µn cho s·∫£n ph·∫©m.
    - ask_payment: Gi·∫£i th√≠ch ch√≠nh s√°ch tr·∫£ g√≥p (0% l√£i, qua ng√¢n h√†ng,...).
    - ask_availability: X√°c nh·∫≠n c√≤n h√†ng (gi·∫£ s·ª≠ lu√¥n c√≥, ho·∫∑c h·ªèi th√™m).
    - compare_products: So s√°nh c√°c s·∫£n ph·∫©m t√¨m th·∫•y, s·ª≠ d·ª•ng specs m·ªõi nh·∫•t.
    - cheapest_product: Hi·ªÉn th·ªã s·∫£n ph·∫©m r·∫ª nh·∫•t, l√Ω do ch·ªçn.
    - filter_by_price: Li·ªát k√™ s·∫£n ph·∫©m trong kho·∫£ng gi√° d∆∞·ªõi d·∫°ng th·∫ª card.
    - filter_by_feature: G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p t√≠nh nƒÉng, gi·∫£i th√≠ch t·∫°i sao.
    - other: Tr·∫£ l·ªùi chung, ∆∞u ti√™n b√°n h√†ng, s·ª≠ d·ª•ng d·ªØ li·ªáu b√™n ngo√†i cho c√¢u h·ªèi kh√≥.
    `;

    const replyResult = await model.generateContent([systemPrompt, userPrompt]);
    const reply = replyResult.response.text();

    return NextResponse.json({
      success: true,
      reply: reply || 'Xin l·ªói, em kh√¥ng hi·ªÉu c√¢u h·ªèi. Anh/Ch·ªã c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n?',
      intent: parsed.intent,
      entity: parsed.entity || regexEntities.join(', '),
      productsFound: foundProducts.length,
    });
  } catch (err: unknown) {
    console.error('L·ªói server:', err);
    let errorMessage = 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i.';
    if (err instanceof Error && 'response' in err && (err.response as { status: number }).status === 429) {
      errorMessage =
        'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API Gemini mi·ªÖn ph√≠ (50 y√™u c·∫ßu/ng√†y). Vui l√≤ng n√¢ng c·∫•p t√†i kho·∫£n Google AI Studio b·∫±ng c√°ch li√™n k·∫øt t√†i kho·∫£n thanh to√°n t·∫°i https://aistudio.google.com/app/apikey ƒë·ªÉ c√≥ h·∫°n m·ª©c cao h∆°n. Ho·∫∑c th·ª≠ l·∫°i v√†o ng√†y mai.';
    }
    return NextResponse.json({ success: false, message: errorMessage }, { status: 500 });
  }
}

export const dynamic = 'force-dynamic';
